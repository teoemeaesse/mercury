#version 450

#extension GL_ARB_gpu_shader_int64 : require

const int INVOCATIONS = @;

layout(local_size_x = INVOCATIONS, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 1) buffer i_data
{
    float initial_frame[];
};
layout(std430, binding = 2) buffer f_data
{
    float final_frame[];
};

uniform int n, work_groups, invocations, particle_size;
uniform float g;

int INVOCATION_TOTAL = work_groups * INVOCATIONS;

void main() {
    uint WorkGroupIndex = uint(dot(gl_WorkGroupID, uvec3(1, gl_NumWorkGroups.x, gl_NumWorkGroups.x * gl_NumWorkGroups.y)));
    uint UniqueIndex = (WorkGroupIndex * gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z) + gl_LocalInvocationIndex;

    int64_t k = int64_t(UniqueIndex);

    int64_t start, end;
    int64_t remainder = int64_t(n - (INVOCATION_TOTAL * int64_t(n / INVOCATION_TOTAL))),
            n0 = int64_t(n / INVOCATION_TOTAL);
    
    start = min(k, remainder) * (n0 + int64_t(1)) + max(int64_t(0), (k - remainder) * n0);
    end = start + n0;
    if(k < remainder)
        end++;
    
    if(INVOCATION_TOTAL > n && k >= remainder)
        return;

    for(int i = int(double(start)); i < int(double(end)); i++) {
        float x = initial_frame[i * particle_size],
              y = initial_frame[i * particle_size + 1],
              xv = initial_frame[i * particle_size + 2],
              yv = initial_frame[i * particle_size + 3],
              xa = 0, ya = 0;

        for(int j = 0; j < n; j++) {
            float x2 = initial_frame[j * particle_size], 
                  y2 = initial_frame[j * particle_size + 1],
                  m = initial_frame[j * particle_size + 4];
            if(x == x2 && y == y2)
                continue;
            float dx = x2 - x, dy = y2 - y,
                  len2 = dx * dx + dy * dy,
                  gxm = g * m;
            xa += dx * gxm / len2;
            ya += dy * gxm / len2;
        }

        // Euler integration
        final_frame[i * particle_size] = x + xv;
        final_frame[i * particle_size + 1] = y + yv;

        final_frame[i * particle_size + 2] = xv + xa;
        final_frame[i * particle_size + 3] = yv + ya;

        final_frame[i * particle_size + 4] = initial_frame[i * particle_size + 4];
    }
}