// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simulation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_simulation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_simulation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_simulation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_simulation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simulation_2eproto;
namespace serialization {
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Particle;
class ParticleDefaultTypeInternal;
extern ParticleDefaultTypeInternal _Particle_default_instance_;
class Simulation;
class SimulationDefaultTypeInternal;
extern SimulationDefaultTypeInternal _Simulation_default_instance_;
}  // namespace serialization
PROTOBUF_NAMESPACE_OPEN
template<> ::serialization::Frame* Arena::CreateMaybeMessage<::serialization::Frame>(Arena*);
template<> ::serialization::Particle* Arena::CreateMaybeMessage<::serialization::Particle>(Arena*);
template<> ::serialization::Simulation* Arena::CreateMaybeMessage<::serialization::Simulation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serialization {

// ===================================================================

class Particle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Particle) */ {
 public:
  inline Particle() : Particle(nullptr) {};
  virtual ~Particle();

  Particle(const Particle& from);
  Particle(Particle&& from) noexcept
    : Particle() {
    *this = ::std::move(from);
  }

  inline Particle& operator=(const Particle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Particle& operator=(Particle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Particle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Particle* internal_default_instance() {
    return reinterpret_cast<const Particle*>(
               &_Particle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Particle& a, Particle& b) {
    a.Swap(&b);
  }
  inline void Swap(Particle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Particle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Particle* New() const final {
    return CreateMaybeMessage<Particle>(nullptr);
  }

  Particle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Particle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Particle& from);
  void MergeFrom(const Particle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Particle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Particle";
  }
  protected:
  explicit Particle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulation_2eproto);
    return ::descriptor_table_simulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVxFieldNumber = 4,
    kVyFieldNumber = 5,
    kVzFieldNumber = 6,
    kMassFieldNumber = 7,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float vx = 4;
  void clear_vx();
  float vx() const;
  void set_vx(float value);
  private:
  float _internal_vx() const;
  void _internal_set_vx(float value);
  public:

  // float vy = 5;
  void clear_vy();
  float vy() const;
  void set_vy(float value);
  private:
  float _internal_vy() const;
  void _internal_set_vy(float value);
  public:

  // float vz = 6;
  void clear_vz();
  float vz() const;
  void set_vz(float value);
  private:
  float _internal_vz() const;
  void _internal_set_vz(float value);
  public:

  // float mass = 7;
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // @@protoc_insertion_point(class_scope:serialization.Particle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float vx_;
  float vy_;
  float vz_;
  float mass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulation_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {};
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulation_2eproto);
    return ::descriptor_table_simulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParticlesFieldNumber = 1,
  };
  // repeated .serialization.Particle particles = 1;
  int particles_size() const;
  private:
  int _internal_particles_size() const;
  public:
  void clear_particles();
  ::serialization::Particle* mutable_particles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Particle >*
      mutable_particles();
  private:
  const ::serialization::Particle& _internal_particles(int index) const;
  ::serialization::Particle* _internal_add_particles();
  public:
  const ::serialization::Particle& particles(int index) const;
  ::serialization::Particle* add_particles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Particle >&
      particles() const;

  // @@protoc_insertion_point(class_scope:serialization.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Particle > particles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulation_2eproto;
};
// -------------------------------------------------------------------

class Simulation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialization.Simulation) */ {
 public:
  inline Simulation() : Simulation(nullptr) {};
  virtual ~Simulation();

  Simulation(const Simulation& from);
  Simulation(Simulation&& from) noexcept
    : Simulation() {
    *this = ::std::move(from);
  }

  inline Simulation& operator=(const Simulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Simulation& operator=(Simulation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Simulation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Simulation* internal_default_instance() {
    return reinterpret_cast<const Simulation*>(
               &_Simulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Simulation& a, Simulation& b) {
    a.Swap(&b);
  }
  inline void Swap(Simulation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Simulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Simulation* New() const final {
    return CreateMaybeMessage<Simulation>(nullptr);
  }

  Simulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Simulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Simulation& from);
  void MergeFrom(const Simulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Simulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialization.Simulation";
  }
  protected:
  explicit Simulation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_simulation_2eproto);
    return ::descriptor_table_simulation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 1,
  };
  // repeated .serialization.Frame frames = 1;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::serialization::Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Frame >*
      mutable_frames();
  private:
  const ::serialization::Frame& _internal_frames(int index) const;
  ::serialization::Frame* _internal_add_frames();
  public:
  const ::serialization::Frame& frames(int index) const;
  ::serialization::Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Frame >&
      frames() const;

  // @@protoc_insertion_point(class_scope:serialization.Simulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Frame > frames_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_simulation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Particle

// float x = 1;
inline void Particle::clear_x() {
  x_ = 0;
}
inline float Particle::_internal_x() const {
  return x_;
}
inline float Particle::x() const {
  // @@protoc_insertion_point(field_get:serialization.Particle.x)
  return _internal_x();
}
inline void Particle::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Particle::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:serialization.Particle.x)
}

// float y = 2;
inline void Particle::clear_y() {
  y_ = 0;
}
inline float Particle::_internal_y() const {
  return y_;
}
inline float Particle::y() const {
  // @@protoc_insertion_point(field_get:serialization.Particle.y)
  return _internal_y();
}
inline void Particle::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Particle::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:serialization.Particle.y)
}

// float z = 3;
inline void Particle::clear_z() {
  z_ = 0;
}
inline float Particle::_internal_z() const {
  return z_;
}
inline float Particle::z() const {
  // @@protoc_insertion_point(field_get:serialization.Particle.z)
  return _internal_z();
}
inline void Particle::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Particle::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:serialization.Particle.z)
}

// float vx = 4;
inline void Particle::clear_vx() {
  vx_ = 0;
}
inline float Particle::_internal_vx() const {
  return vx_;
}
inline float Particle::vx() const {
  // @@protoc_insertion_point(field_get:serialization.Particle.vx)
  return _internal_vx();
}
inline void Particle::_internal_set_vx(float value) {
  
  vx_ = value;
}
inline void Particle::set_vx(float value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:serialization.Particle.vx)
}

// float vy = 5;
inline void Particle::clear_vy() {
  vy_ = 0;
}
inline float Particle::_internal_vy() const {
  return vy_;
}
inline float Particle::vy() const {
  // @@protoc_insertion_point(field_get:serialization.Particle.vy)
  return _internal_vy();
}
inline void Particle::_internal_set_vy(float value) {
  
  vy_ = value;
}
inline void Particle::set_vy(float value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:serialization.Particle.vy)
}

// float vz = 6;
inline void Particle::clear_vz() {
  vz_ = 0;
}
inline float Particle::_internal_vz() const {
  return vz_;
}
inline float Particle::vz() const {
  // @@protoc_insertion_point(field_get:serialization.Particle.vz)
  return _internal_vz();
}
inline void Particle::_internal_set_vz(float value) {
  
  vz_ = value;
}
inline void Particle::set_vz(float value) {
  _internal_set_vz(value);
  // @@protoc_insertion_point(field_set:serialization.Particle.vz)
}

// float mass = 7;
inline void Particle::clear_mass() {
  mass_ = 0;
}
inline float Particle::_internal_mass() const {
  return mass_;
}
inline float Particle::mass() const {
  // @@protoc_insertion_point(field_get:serialization.Particle.mass)
  return _internal_mass();
}
inline void Particle::_internal_set_mass(float value) {
  
  mass_ = value;
}
inline void Particle::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:serialization.Particle.mass)
}

// -------------------------------------------------------------------

// Frame

// repeated .serialization.Particle particles = 1;
inline int Frame::_internal_particles_size() const {
  return particles_.size();
}
inline int Frame::particles_size() const {
  return _internal_particles_size();
}
inline void Frame::clear_particles() {
  particles_.Clear();
}
inline ::serialization::Particle* Frame::mutable_particles(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Frame.particles)
  return particles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Particle >*
Frame::mutable_particles() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Frame.particles)
  return &particles_;
}
inline const ::serialization::Particle& Frame::_internal_particles(int index) const {
  return particles_.Get(index);
}
inline const ::serialization::Particle& Frame::particles(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Frame.particles)
  return _internal_particles(index);
}
inline ::serialization::Particle* Frame::_internal_add_particles() {
  return particles_.Add();
}
inline ::serialization::Particle* Frame::add_particles() {
  // @@protoc_insertion_point(field_add:serialization.Frame.particles)
  return _internal_add_particles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Particle >&
Frame::particles() const {
  // @@protoc_insertion_point(field_list:serialization.Frame.particles)
  return particles_;
}

// -------------------------------------------------------------------

// Simulation

// repeated .serialization.Frame frames = 1;
inline int Simulation::_internal_frames_size() const {
  return frames_.size();
}
inline int Simulation::frames_size() const {
  return _internal_frames_size();
}
inline void Simulation::clear_frames() {
  frames_.Clear();
}
inline ::serialization::Frame* Simulation::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:serialization.Simulation.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Frame >*
Simulation::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:serialization.Simulation.frames)
  return &frames_;
}
inline const ::serialization::Frame& Simulation::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::serialization::Frame& Simulation::frames(int index) const {
  // @@protoc_insertion_point(field_get:serialization.Simulation.frames)
  return _internal_frames(index);
}
inline ::serialization::Frame* Simulation::_internal_add_frames() {
  return frames_.Add();
}
inline ::serialization::Frame* Simulation::add_frames() {
  // @@protoc_insertion_point(field_add:serialization.Simulation.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialization::Frame >&
Simulation::frames() const {
  // @@protoc_insertion_point(field_list:serialization.Simulation.frames)
  return frames_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialization

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_simulation_2eproto
